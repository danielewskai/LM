plot(g, vertex.color = (ising(t, tree.gen(10, 3))+3), vertex.size = 30, vertex.label = NA)
dev.off()
}
}
vertices <- 1:10
edges <- unlist(tree.gen(10, 3)$edges)
g <- graph(edges, directed=FALSE)
temp <- c(0, 0.01, 0.1, 0.4, 0.5, 0.8)
for (t in temp) {
for (i in 1:5){
file <- paste0("~/GitHub/LM/R/Wygenerowane obrazki/tree_graph", t*100, i, ".png")
png(file, width = 800, height = 600)
plot(g, vertex.color = (ising(t, tree.gen(10, 3))+3), vertex.size = 25, vertex.label = NA)
dev.off()
}
}
vertices <- 1:20
edges <- unlist(tree.gen(20, 3)$edges)
g <- graph(edges, directed=FALSE)
temp <- c(0, 0.01, 0.1, 0.4, 0.5, 0.8)
for (t in temp) {
for (i in 1:5){
file <- paste0("~/GitHub/LM/R/Wygenerowane obrazki/tree_graph", t*100, i, ".png")
png(file, width = 800, height = 600)
plot(g, vertex.color = (ising(t, tree.gen(20, 3))+3), vertex.size = 25, vertex.label = NA)
dev.off()
}
}
vertices <- 1:10
edges <- unlist(tree.gen(10, 3)$edges)
g <- graph(edges, directed=FALSE)
temp <- c(0, 0.01, 0.1, 0.4, 0.5, 0.8)
for (t in temp) {
for (i in 1:5){
file <- paste0("~/GitHub/LM/R/Wygenerowane obrazki/tree_graph", t*100, i, ".png")
png(file, width = 800, height = 600)
plot(g, vertex.color = (ising(t, tree.gen(10, 3))+3), vertex.size = 25, vertex.label = NA)
dev.off()
}
}
vertices <- 1:10
edges <- unlist(tree.gen(10, 3)$edges)
g <- graph(edges, directed=FALSE)
temp <- c(0, 0.01, 0.1, 0.4, 0.5, 0.8)
for (t in temp) {
for (i in 1:5){
file <- paste0("~/GitHub/LM/R/Wygenerowane obrazki/tree_graph", t*100, i, ".png")
png(file, width = 800, height = 600)
plot(g, vertex.color = (ising(t, tree.gen(10, 3))+3), vertex.size = 25, vertex.label = NA)
dev.off()
}
}
vertices <- 1:25
edges <- unlist(lattice.gen(5,5)$edges)
g <- graph(edges, directed=FALSE)
temp <- c(0, 0.01, 0.1, 0.4, 0.5, 0.8)
for (t in temp) {
for (i in 1:5){
file <- paste0("~/GitHub/LM/R/Wygenerowane obrazki/lattice_graph", t*100, i, ".png")
png(file, width = 800, height = 600)
plot(g, vertex.color = (ising(t, lattice.gen(5,5))+3), vertex.size = 30, vertex.label = NA)
dev.off()
}
}
vertices <- 1:16
edges <- unlist(lattice.gen(4,4)$edges)
g <- graph(edges, directed=FALSE)
temp <- c(0, 0.01, 0.1, 0.4, 0.5, 0.8)
for (t in temp) {
for (i in 1:5){
file <- paste0("~/GitHub/LM/R/Wygenerowane obrazki/lattice_graph", t*100, i, ".png")
png(file, width = 800, height = 600)
plot(g, vertex.color = (ising(t, lattice.gen(4,4))+3), vertex.size = 30, vertex.label = NA)
dev.off()
}
}
for (n in 1:20){
vertices <- 1:n
edges <- unlist(tree.gen(n, 3)$edges)
g <- graph(edges, directed=FALSE)
for (i in 1:5){
file <- paste0("~/GitHub/LM/R/Wygenerowane obrazki/tree_graph_number", n, i, ".png")
png(file, width = 800, height = 600)
plot(g, vertex.color = (ising(0.4, tree.gen(n, 3))+3), vertex.size = 25, vertex.label = NA)
dev.off()
}
}
for (n in 1:20){
vertices <- 1:n
edges <- unlist(tree.gen(n, 3)$edges)
g <- graph(edges, directed=FALSE)
for (i in 1:5){
file <- paste0("~/GitHub/LM/R/Wygenerowane obrazki/tree_graph_number", n, i, ".png")
png(file, width = 800, height = 600)
plot(g, vertex.color = (ising(0.4, tree.gen(n, 3))+3), vertex.size = 25, vertex.label = NA)
dev.off()
}
}
for (n in 3:20){
vertices <- 1:n
edges <- unlist(tree.gen(n, 3)$edges)
g <- graph(edges, directed=FALSE)
for (i in 1:5){
file <- paste0("~/GitHub/LM/R/Wygenerowane obrazki/tree_graph_number", n, i, ".png")
png(file, width = 800, height = 600)
plot(g, vertex.color = (ising(0.4, tree.gen(n, 3))+3), vertex.size = 25, vertex.label = NA)
dev.off()
}
}
library(tictoc)
install.packages("tictoc")
for (n in 3:20){
tic()
ising <- ising(0.4, tree.gen(n, 3))
toc()
}
library(tictoc)
for (n in 3:20){
tic()
ising <- ising(0.4, tree.gen(n, 3))
toc()
}
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 50, s_up = rep(1, n)) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s) - 1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k - 1)) {
memory[[length(memory) + 1]] <- list()
}
for (i in (2^k):1) {
# print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
}
}
for (n in 3:20){
tic()
ising <- ising(0.4, tree.gen(n, 3))
toc()
}
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 50, s_up = rep(1, n)) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s) - 1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k - 1)) {
memory[[length(memory) + 1]] <- list()
}
for (i in (2^k):1) {
# print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
}
}
for (n in 3:20){
tic()
ising <- ising(0.4, tree.gen(n, 3))
toc()
}
install.packages("microbenchmark")
library("microbenchmark")
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 50, s_up = rep(1, n)) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s) - 1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k - 1)) {
memory[[length(memory) + 1]] <- list()
}
for (i in (2^k):1) {
# print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
}
}
microbenchmark(ising(0.4, lattice.gen(3, 3)), times = 10, unit = "s")
microbenchmark(ising(0.4, lattice.gen(3, 3)), times = 10, unit = "s")
result_complete <- list()
for (n in 2:6) {
result_complete[[length(result_complete)+1]] <- microbenchmark(ising(0.4, complete.graph.gen(n)), times = 10, unit = "s")
}
result_complete
result_complete <- list()
for (n in 2:10) {
result_complete[[length(result_complete)+1]] <- microbenchmark(ising(0.4, complete.graph.gen(n)), times = 10, unit = "s")
}
result_complete <- list()
for (n in 2:10) {
result_complete[[length(result_complete)+1]] <- microbenchmark(ising(0.4, complete.graph.gen(n)), times = 10, unit = "s")
print(n)
}
for (n in 2:7) {
result_complete[[length(result_complete)+1]] <- microbenchmark(ising(0.4, complete.graph.gen(n)), times = 10, unit = "s")
print(n)
}
result_tree <- list()
result_tree <- list()
for (n in 2:20) {
result_tree[[length(result_complete)+1]] <- microbenchmark(ising(0.4, tree.gen(n)), times = 10, unit = "s")
print(n)
}
library("microbenchmark")
result_complete <- list()
for (n in 2:7) {
result_complete[[length(result_complete)+1]] <- microbenchmark(ising(0.4, complete.graph.gen(n)), times = 10, unit = "s")
}
result_tree <- list()
for (n in 2:20) {
result_tree[[length(result_tree)+1]] <- microbenchmark(ising(0.4, tree.gen(n)), times = 10, unit = "s")
}
save(result_complete, file = "~/GitHub/LM/R/Wyniki czasowe/complete_graph.RData")
load(file = "~/GitHub/LM/R/Wyniki czasowe/complete_graph.RData")
result_lattice <- list()
for (i in 2:5) {
for (j in 2:5){
result_lattice[[length(result_lattice)+1]] <- microbenchmark(ising(0.4, lattice.gen(i, j)), times = 10, unit = "s")
print(i*j)
}
}
save(result_tree, file = "~/GitHub/LM/R/Wyniki czasowe/tree_graph.RData")
save(result_lattice, file = "~/GitHub/LM/R/Wyniki czasowe/lattice_graph.RData")
load("~/GitHub/LM/R/Wyniki czasowe/tree_graph.RData")
load("~/GitHub/LM/R/Wyniki czasowe/lattice_graph.RData")
res <- load("~/GitHub/LM/R/Wyniki czasowe/lattice_graph.RData")
res
result_lattice
load("~/GitHub/LM/R/Wyniki czasowe/lattice_graph.RData")
View(g)
View(result_tree)
load("~/GitHub/LM/R/Wyniki czasowe/lattice_graph.RData")
View(result_lattice)
temp <- c(0,0.1, 0.1, 0.4, 0.8, 1)
result_complete_temp <- list()
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 50, s_up = rep(1, n)) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s) - 1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k - 1)) {
memory[[length(memory) + 1]] <- list()
}
for (i in (2^k):1) {
# print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
}
}
neighbours <- function(nei, state) {
tmp <- state[as.logical(nei)]
nb_plus <- sum(tmp == 1)
nb_minus <- length(tmp) - nb_plus
list(nb_minus = nb_minus, nb_plus = nb_plus)
}
complete.graph.gen <- function(n = 5) {
edges <- list()
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
edges[[length(edges) + 1]] <- c(i, j)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
lattice.gen <- function(n_row = 3, n_col = 3) {
n <- n_row * n_col
nr_ver <- 1:n
edges <- list()
for (j in 1:n_col) {
for (i in 1:(n_row - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + i * n_col)
}
}
for (i in 1:n_row) {
for (j in 1:(n_col - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + (i - 1) * n_col + 1)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
tree.gen <- function(n = 5, branching_factor = 2) {
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
add_edges <- function(v, w, branching_factor) {
children <- 0
nx <- sample.int(branching_factor - 1, size = 1)
for (i in 1:nx) {
if (w <= n) {
edges[[length(edges) + 1]] <<- c(v, w)
w <- w + 1
children <- children + 1
} else {
break
}
}
return(w)
}
w <- 2
for (v in 1:(n - 1)) {
w <- add_edges(v, w, branching_factor)
if (w > n) {
break
}
}
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
result_complete_temp <- list()
for (t in temp) {
result_complete_temp[[length(result_complete_temp)+1]] <- microbenchmark(ising(t, complete.graph.gen(5)), times = 10, unit = "s")
}
temp <- c(0,0.1, 0.1, 0.4, 0.8, 1)
result_complete_temp <- list()
for (t in temp) {
result_complete_temp[[length(result_complete_temp)+1]] <- microbenchmark(ising(t, complete.graph.gen(5)), times = 10, unit = "s")
print(t)
}
result_lattice_temp <- list()
for (t in temp) {
result_lattice_temp[[length(result_lattice_temp)+1]] <- microbenchmark(ising(t, lattice.gen(3, 3)), times = 10, unit = "s")
print(t)
}
result_tree_temp <- list()
for (t in temp) {
result_tree_temp[[length(result_tree_temp)+1]] <- microbenchmark(ising(t, tree.gen(8)), times = 10, unit = "s")
print(t)
}
temp <- c(0, 0.01, 0.1, 0.4, 0.8, 1)
result_complete_temp <- list()
for (t in temp) {
result_complete_temp[[length(result_complete_temp)+1]] <- microbenchmark(ising(t, complete.graph.gen(5)), times = 10, unit = "s")
print(t)
}
result_tree_temp <- list()
for (t in temp) {
result_tree_temp[[length(result_tree_temp)+1]] <- microbenchmark(ising(t, tree.gen(8)), times = 10, unit = "s")
print(t)
}
result_lattice_temp <- list()
for (t in temp) {
result_lattice_temp[[length(result_lattice_temp)+1]] <- microbenchmark(ising(t, lattice.gen(3, 3)), times = 10, unit = "s")
print(t)
}
save(result_complete_temp, file = "~/GitHub/LM/R/Wyniki czasowe/complete_graph_temp.RData")
save(result_tree_temp, file = "~/GitHub/LM/R/Wyniki czasowe/tree_graph_temp.RData")
save(result_lattice_temp, file = "~/GitHub/LM/R/Wyniki czasowe/lattice_graph_temp.RData")
