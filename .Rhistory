graph
n <- ncol(graph$nei_matrix)
n
s_up <- rep(1,n)
s_up
s_down <- rep(-1,n)
s_down
stans <- c(s_up, s_down)
stans
stans <- list(s_up, s_down)
stans
U_vec <- c(runif(1))
U_vec <- c(runif(1))
U_vec
k <- 0
memory <- list()
s in stans
while(k < 5) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
while(k < 5) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
neighbours <- function(nei, state) {
ct <- table(state[nei])
if (is.na(ct['-1'])){
ct['-1'] <- 0
}
if (is.na(ct['1'])){
ct['1'] <- 0
}
list(nb_minus = ct['-1'], nb_plus = ct['1'])
}
while(k < 5) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
U_vec
i
nei_plus
nei_minus
nei_plus-nei_minus
prog
U_vec[i]
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
stan
1:n
v
stan[v]
temp = 1000
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
U_vec[i]
prog
stan[v]
U_vec[i]<prog
prog
U_vec[i]
prog
exp(2*temp*(nei_plus-nei_minus))
nei_plus
nei_minus
temp
exp(8000)
temp = 100
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
temp
nei_plus-nei_minus
exp(2*temp*(nei_plus-nei_minus))
temp = 10
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
U_vec
(2^k):1
prog
temp = 0.1
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
temp = 0.01
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
while(k < 2) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 2) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
temp = 0.0001
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 2) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
prog
U_vec[i]
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
print(i)
for (s in stans){
print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
print(v)
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
print(i)
for (s in stans){
print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
print(v)
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
prog
nei_plus
nei_minus
