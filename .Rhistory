prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec_step<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
return(stan)
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
stan <- new_state(s, U_vex[i])
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
stans_new[[length(stans_new)+1]]<-stan
}
}
stans <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
complete.graph.gen <- function(n = 5) {
edges <- list()
for (i in 1:(n-1)) {
for (j in (i+1):n) {
edges[[length(edges) + 1]] <- c(i, j)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
neighbours <- function(nei, state) {
ct <- table(state[nei])
if (is.na(ct['-1'])){
ct['-1'] <- 0
}
if (is.na(ct['1'])){
ct['1'] <- 0
}
list(nb_minus = ct['-1'], nb_plus = ct['1'])
}
temp = 0.0001
graph = complete.graph.gen(5)
new_state <- function(state,  U_vec_step, graph = graph){
n <- ncol(graph$nei_matrix)
for (v in 1:n){
stan <- state
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec_step<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
return(stan)
}
new_state <- function(state,  U_vec_step){
n <- ncol(graph$nei_matrix)
for (v in 1:n){
stan <- state
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec_step<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
return(stan)
}
new_state(c(1,1,1,1,1), runif(1))
n <- ncol(graph$nei_matrix)
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
stan <- new_state(s, U_vex[i])
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
stans_new[[length(stans_new)+1]]<-stan
}
}
stans <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
stan <- new_state(s, U_vec[i])
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
stans_new[[length(stans_new)+1]]<-stan
}
}
stans <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
stans
stan
stans_new
stans_new
stans_new[[length(stans_new)+1]]
stan
stan
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
stan <- new_state(s, U_vec[i])
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
stans_new[[length(stans_new)+1]] <- stan
}
}
stans <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
stans
stans
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
stans
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
U_vec
U_vec <- c(runif(1))
k <- 0
k <- 0
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
U_vec
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
U_vec
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
U_vec
runif(2^(k-1))
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
stan <- new_state(s, U_vec[i])
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
stans_new[[length(stans_new)+1]] <- stan
}
}
stans <- stans_new
}
stans
stans_new
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
s_str <- paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")
memorized <- memory[[s_str]]
if (is.null(memorized)){
stan <- new_state(s, U_vec[i])
memory[[s_str]] <- stan
stans_new[[length(stans_new)+1]] <- stan
} else {
stans_new[[length(stans_new)+1]] <- memorized
}
}
stans <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
stans
memory
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
s_str <- paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")
memorized <- memory[[s_str]]
if (is.null(memorized)){
stan <- new_state(s, U_vec[i])
memory[[s_str]] <- stan
stans_new[[length(stans_new)+1]] <- stan
} else {
stans_new[[length(stans_new)+1]] <- memorized
}
}
stans <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
new_state(c(1,-1,1,1,-1), 0.001)
new_state(c(1,1,1,1,-1), 0.001)
new_state(c(1,1,1,1,-1), 0.0000001)
new_state(c(1,1,-1,1,-1), 0.0000001)
new_state <- function(state,  U_vec_step){
n <- ncol(graph$nei_matrix)
stan <- state
for (v in 1:n){
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec_step<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
return(stan)
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
s_str <- paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")
memorized <- memory[[s_str]]
if (is.null(memorized)){
stan <- new_state(s, U_vec[i])
memory[[s_str]] <- stan
stans_new[[length(stans_new)+1]] <- stan
} else {
stans_new[[length(stans_new)+1]] <- memorized
}
}
stans <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
lattice.gen <- function(n_row = 3, n_col = 3) {
n <- n_row * n_col
nr_ver <- 1:n
edges <- list()
for (j in 1:n_col) {
for (i in 1:(n_row - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + i * n_col)
}
}
for (i in 1:n_row) {
for (j in 1:(n_col - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + (i - 1) * n_col + 1)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
temp = 0.01
graph = lattice.gen(5,5)
new_state <- function(state,  U_vec_step){
n <- ncol(graph$nei_matrix)
stan <- state
for (v in 1:n){
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec_step<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
return(stan)
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
s_str <- paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")
memorized <- memory[[s_str]]
if (is.null(memorized)){
stan <- new_state(s, U_vec[i])
memory[[s_str]] <- stan
stans_new[[length(stans_new)+1]] <- stan
} else {
stans_new[[length(stans_new)+1]] <- memorized
}
}
stans <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
ising <- function(temp = 0.01, graph = lattice.gen(3,3)) {
new_state <- function(state,  U_vec_step){
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample(1:n, 1)
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec_step<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
return(stan)
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(T) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
s_str <- paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")
memorized <- memory[[s_str]]
if (is.null(memorized)){
stan <- new_state(s, U_vec[i])
memory[[s_str]] <- stan
stans_new[[length(stans_new)+1]] <- stan
} else {
stans_new[[length(stans_new)+1]] <- memorized
}
}
stans <- stans_new
}
k <- k+1
if(all(stans[[1]]==stans[[2]])){
return(stans[[1]])
}
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
}
ising(temp = 0.4)
lattice.gen <- function(n_row = 3, n_col = 3) {
n <- n_row * n_col
nr_ver <- 1:n
edges <- list()
for (j in 1:n_col) {
for (i in 1:(n_row - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + i * n_col)
}
}
for (i in 1:n_row) {
for (j in 1:(n_col - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + (i - 1) * n_col + 1)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
neighbours <- function(nei, state) {
ct <- table(state[as.logical(nei)])
if (is.na(ct['-1'])){
ct['-1'] <- 0
}
if (is.na(ct['1'])){
ct['1'] <- 0
}
list(nb_minus = ct['-1'], nb_plus = ct['1'])
}
ising <- function(temp = 0.01, graph = lattice.gen(3,3)) {
new_state <- function(state,  U_vec_step){
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample(1:n, 1)
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec_step<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
return(stan)
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(T) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
s_str <- paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")
memorized <- memory[[s_str]]
if (is.null(memorized)){
stan <- new_state(s, U_vec[i])
memory[[s_str]] <- stan
stans_new[[length(stans_new)+1]] <- stan
} else {
stans_new[[length(stans_new)+1]] <- memorized
}
}
stans <- stans_new
}
k <- k+1
if(all(stans[[1]]==stans[[2]])){
return(stans[[1]])
}
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
}
ising(temp = 0.4)
ising(temp = 0.1)
ising(temp = 0.3)
ising(temp = 0.01)
