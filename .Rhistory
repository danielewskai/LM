for (i in (2^k):1) {
print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
# memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
}
ising(temp = 0.01, graph = lattice.gen(3,3))
ising(temp = 0.01, graph = lattice.gen(4,4))
ising(temp = 0.01, graph = lattice.gen(5,5))
ising(temp = 0.4, graph = lattice.gen(4,4))
ising(temp = 0.4, graph = lattice.gen(5,5))
ising(temp = 0.4, graph = lattice.gen(6,6))
ising(temp = 0.4, graph = lattice.gen(7,7))
ising(temp = 0.1, graph = lattice.gen(3,3))
ising(temp = 0.01, graph = lattice.gen(3,3))
ising(temp = 0.0, graph = lattice.gen(3,3))
ising(temp = 0.0, graph = lattice.gen(3,3))
#print(i)
stans_new <- list()
ncol(complete.graph.gen(5)$nei_matrix)
res <- ising(temp = 0.01, graph = lattice.gen(3,3))
ncol(complete.graph.gen(5)$nei_matrix)
res <- ising(temp = 0.01, graph = lattice.gen(3,3))
data <- matrix(res, ncol = 3)
res <- ising(temp = 0.01, graph = lattice.gen(3,3))
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 10000) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s)-1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1, n)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k-1)){memory[[length(memory)+1]]<- list()}
for (i in (2^k):1) {
#print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
# memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
}
ncol(complete.graph.gen(5)$nei_matrix)
res <- ising(temp = 0.01, graph = lattice.gen(3,3))
data <- matrix(res, ncol = 3)
library(ggplot2)
x <- 1:3
y <- 1:3
data <- expand.grid(X=x, Y=y)
res <- list()
for (i in 1:10){
res[[length(res)+1]] <- ising(temp = 0.01, graph = lattice.gen(3,3))
}
data$Z <- res[[7]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x <- 1:3
y <- 1:3
data <- expand.grid(X=x, Y=y)
res <- list()
for (i in 1:10){
res[[length(res)+1]] <- ising(temp = 0.01, graph = lattice.gen(3,3))
}
data$Z <- res[[7]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x <- 1:3
y <- 1:3
data <- expand.grid(X=x, Y=y)
res <- list()
for (i in 1:10){
res[[length(res)+1]] <- ising(temp = 0.01, graph = lattice.gen(3,3))
}
data$Z <- res[[7]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x <- 1:3
y <- 1:3
data <- expand.grid(X=x, Y=y)
res <- list()
for (i in 1:10){
res[[length(res)+1]] <- ising(temp = 0.01, graph = lattice.gen(3,3))
}
data$Z <- res[[7]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
x <- 1:3
y <- 1:3
data <- expand.grid(X=x, Y=y)
res <- list()
for (i in 1:10){
res[[length(res)+1]] <- ising(temp = 0.01, graph = lattice.gen(3,3))
}
data$Z <- res[[7]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
ising(temp = 1, graph = lattice.gen(3,3))
ising(temp = 1, graph = lattice.gen(3,3))
ising(temp = 10, graph = lattice.gen(3,3))
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 10000) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s)-1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1, n)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k-1)){memory[[length(memory)+1]]<- list()}
for (i in (2^k):1) {
print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
# memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
}
ising(temp = 10, graph = lattice.gen(3,3))
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 20) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s)-1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1, n)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k-1)){memory[[length(memory)+1]]<- list()}
for (i in (2^k):1) {
print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
# memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
}
ising(temp = 10, graph = lattice.gen(3,3))
ising(temp = 1, graph = lattice.gen(3,3))
ising(temp = 2, graph = lattice.gen(3,3))
ising(temp = 0.4, graph = lattice.gen(3,3))
ising(temp = 0.4, graph = lattice.gen(3,3))
ising(temp = 0.4, graph = lattice.gen(3,3))
ising(temp = 0.4, graph = lattice.gen(3,3))
ising(temp = 0.4, graph = lattice.gen(3,3))
ising(temp = 0.4, graph = lattice.gen(3,3))
ising(temp = 0.4, graph = lattice.gen(3,3))
ising(temp = 0.6, graph = lattice.gen(3,3))
ising(temp = 0.4, graph = lattice.gen(4,4))
ising(temp = 0.4, graph = lattice.gen(5,5))
ising(temp = 0.4, graph = lattice.gen(10,10))
ising(temp = 0.4, graph = lattice.gen(5,5))
x <- 1:5
y <- 1:5
data <- expand.grid(X=x, Y=y)
res <- list()
for (i in 1:10){
res[[length(res)+1]] <- ising(temp = 0.4, graph = lattice.gen(5,5))
}
res
data$Z <- res[[1]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[2]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[3]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[4]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[5]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[6]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[7]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[8]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[9]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[10]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
for (i in 1:10){
res[[length(res)+1]] <- ising(temp = 0, graph = lattice.gen(5,5))
}
res[[length(res)+1]] <- ising(temp = 0, graph = lattice.gen(3,3))
for (i in 1:10){
res[[length(res)+1]] <- ising(temp = 0, graph = lattice.gen(3,3))
}
data$Z <- res[[10]]
data <- data.frame(data)
x <- 1:3
y <- 1:3
x <- 1:3
<- 1:3
x <- 1:3
y <- 1:3
data <- expand.grid(X=x, Y=y)
data$Z <- res[[10]]
data$Z <- res[[9]]
data$Z <- res[[1]]
x <- 1:3
y <- 1:3
data <- expand.grid(X=x, Y=y)
res <- list()
for (i in 1:10){
res[[length(res)+1]] <- ising(temp = 0, graph = lattice.gen(3,3))
}
data$Z <- res[[1]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[2]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[3]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[4]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[5]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
complete.graph.gen <- function(n = 5) {
edges <- list()
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
edges[[length(edges) + 1]] <- c(i, j)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
ising(0.4, complete.graph.gen(10))
ising(0.4, complete.graph.gen(5))
ising(0.4, complete.graph.gen(5))
ising(0.4, complete.graph.gen(5))
ising(0.4, complete.graph.gen(5))
ising(0.4, complete.graph.gen(6))
ising(0.4, complete.graph.gen(7))
ising(0.4, complete.graph.gen(8))
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 50, s_up = rep(1, n)) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s)-1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k-1)){memory[[length(memory)+1]]<- list()}
for (i in (2^k):1) {
print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
# memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
}
ising(temp = 0.01, graph = lattice.gen(3,3))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 50, s_up = rep(1, n)) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s)-1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k-1)){memory[[length(memory)+1]]<- list()}
for (i in (2^k):1) {
print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
# memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
}
ising
ising()
ising()
ising()
ising()
ising()
