return(stans[[1]])
}
}
}
}
neighbours <- function(nei, state) {
tmp <- state[as.logical(nei)]
nb_plus <- sum(tmp == 1)
nb_minus <- length(tmp) - nb_plus
list(nb_minus = nb_minus, nb_plus = nb_plus)
}
state_hash <- function(s) {
sum(2^(0:(length(s) - 1)) * ifelse(s > 0, 1, 0))
}
lattice.gen <- function(n_row = 3, n_col = 3) {
n <- n_row * n_col
nr_ver <- 1:n
edges <- list()
for (j in 1:n_col) {
for (i in 1:(n_row - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + i * n_col)
}
}
for (i in 1:n_row) {
for (j in 1:(n_col - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + (i - 1) * n_col + 1)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
tree.gen <- function(n = 5, branching_factor = 2) {
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
add_edges <- function(v, w, branching_factor) {
children <- 0
nx <- sample.int(branching_factor - 1, size = 1)
for (i in 1:nx) {
if (w <= n) {
edges[[length(edges) + 1]] <<- c(v, w)
w <- w + 1
children <- children + 1
} else {
break
}
}
return(w)
}
w <- 2
for (v in 1:(n - 1)) {
w <- add_edges(v, w, branching_factor)
if (w > n) {
break
}
}
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
complete.graph.gen <- function(n = 5) {
edges <- list()
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
edges[[length(edges) + 1]] <- c(i, j)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 50, mem_ret = FALSE) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
n <- ncol(graph$nei_matrix)
s_down <- rep(-1, n)
s_up = rep(1, n)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
stans <- list(s_up, s_down)
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k - 1)) {
memory[[length(memory) + 1]] <- list()
}
for (i in (2^k):1) {
# print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
if(mem_ret == TRUE) {
return(list(result = stans[[1]], history= memory))
} else {
return(stans[[1]])
}
}
}
}
state_hash <- function(s) {
sum(2^(0:(length(s) - 1)) * ifelse(s > 0, 1, 0))
}
tree.gen <- function(n = 5, branching_factor = 2) {
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
add_edges <- function(v, w, branching_factor) {
children <- 0
nx <- sample.int(branching_factor - 1, size = 1)
for (i in 1:nx) {
if (w <= n) {
edges[[length(edges) + 1]] <<- c(v, w)
w <- w + 1
children <- children + 1
} else {
break
}
}
return(w)
}
w <- 2
for (v in 1:(n - 1)) {
w <- add_edges(v, w, branching_factor)
if (w > n) {
break
}
}
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
complete.graph.gen <- function(n = 5) {
edges <- list()
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
edges[[length(edges) + 1]] <- c(i, j)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
lattice.gen <- function(n_row = 3, n_col = 3) {
n <- n_row * n_col
nr_ver <- 1:n
edges <- list()
for (j in 1:n_col) {
for (i in 1:(n_row - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + i * n_col)
}
}
for (i in 1:n_row) {
for (j in 1:(n_col - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + (i - 1) * n_col + 1)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
neighbours <- function(nei, state) {
tmp <- state[as.logical(nei)]
nb_plus <- sum(tmp == 1)
nb_minus <- length(tmp) - nb_plus
list(nb_minus = nb_minus, nb_plus = nb_plus)
}
library(igraph)
vertices <- 1:6
edges <- unlist(complete.graph.gen(6)$edges)
g <- graph(edges, directed=FALSE)
temp <- c(0, 0.01, 0.1, 0.4, 0.5, 0.8)
for (t in temp) {
for (i in 1:5) {
file <- paste0("~/GitHub/LM/R/Wygenerowane obrazki/complete_graph", t*100, i, ".png")
png(file, width = 800, height = 600)
plot(g, vertex.color = (ising(t, complete.graph.gen(6))+3), vertex.size = 50, vertex.label = NA)
dev.off()
}
}
vertices <- 1:16
edges <- unlist(lattice.gen(4,4)$edges)
g <- graph(edges, directed=FALSE)
temp <- c(0, 0.01, 0.1, 0.4, 0.5, 0.8)
for (t in temp) {
for (i in 1:5){
file <- paste0("~/GitHub/LM/R/Wygenerowane obrazki/lattice_graph", t*100, i, ".png")
png(file, width = 800, height = 600)
plot(g, vertex.color = (ising(t, lattice.gen(4,4))+3), vertex.size = 30, vertex.label = NA)
dev.off()
}
}
vertices <- 1:10
edges <- unlist(tree.gen(10, 3)$edges)
g <- graph(edges, directed=FALSE)
temp <- c(0, 0.01, 0.1, 0.4, 0.5, 0.8)
for (t in temp) {
for (i in 1:5){
file <- paste0("~/GitHub/LM/R/Wygenerowane obrazki/tree_graph", t*100, i, ".png")
png(file, width = 800, height = 600)
plot(g, vertex.color = (ising(t, tree.gen(10, 3))+3), vertex.size = 25, vertex.label = NA)
dev.off()
}
}
library("microbenchmark")
result_complete <- list()
for (n in 2:7) {
result_complete[[length(result_complete)+1]] <- microbenchmark(ising(0.4, complete.graph.gen(n)), times = 10, unit = "s")
}
result_tree <- list()
for (n in 2:20) {
result_tree[[length(result_tree)+1]] <- microbenchmark(ising(0.4, tree.gen(n)), times = 10, unit = "s")
}
result_lattice <- list()
for (i in 2:5) {
for (j in 2:5){
result_lattice[[length(result_lattice)+1]] <- microbenchmark(ising(0.4, lattice.gen(i, j)), times = 10, unit = "s")
}
}
save(result_complete, file = "~/GitHub/LM/R/Wyniki czasowe/complete_graph.RData")
save(result_tree, file = "~/GitHub/LM/R/Wyniki czasowe/tree_graph.RData")
save(result_lattice, file = "~/GitHub/LM/R/Wyniki czasowe/lattice_graph.RData")
temp <- c(0, 0.01, 0.1, 0.4, 0.8, 1)
result_complete_temp <- list()
for (t in temp) {
result_complete_temp[[length(result_complete_temp)+1]] <- microbenchmark(ising(t, complete.graph.gen(5)), times = 10, unit = "s")
print(t)
}
result_tree_temp <- list()
for (t in temp) {
result_tree_temp[[length(result_tree_temp)+1]] <- microbenchmark(ising(t, tree.gen(8)), times = 10, unit = "s")
print(t)
}
result_lattice_temp <- list()
for (t in temp) {
result_lattice_temp[[length(result_lattice_temp)+1]] <- microbenchmark(ising(t, lattice.gen(3, 3)), times = 10, unit = "s")
print(t)
}
save(result_complete_temp, file = "~/GitHub/LM/R/Wyniki czasowe/complete_graph_temp.RData")
save(result_tree_temp, file = "~/GitHub/LM/R/Wyniki czasowe/tree_graph_temp.RData")
save(result_lattice_temp, file = "~/GitHub/LM/R/Wyniki czasowe/lattice_graph_temp.RData")
energy(lattice.gen(3,3), ising())
energy <- function(edges, state, J = 1) {
size <- length(edges)
en <- 0
for (i in 1:size) {
en <- en + edges[[i]][1]*edges[[i]][2]
}
return(-en)
}
energy <- function(edges, state, J = 1) {
size <- length(edges)
en <- 0
for (i in 1:size) {
en <- en + edges[[i]][1]*edges[[i]][2]
}
return(-en)
}
energy(lattice.gen(3,3), ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising(temp = 0))
ising(temp = 0)
ising(temp = 0)
ising(temp = 0)
ising(temp = 0)
ising(temp = 0)
state <- ising(temp = 0)
state <- ising(temp = 0,lattice.gen(3,3))
energy(lattice.gen(3,3)$edges, state)
edges <- lattice.gen(3,3)$edges
edges
size <- length(edges)
size
en <- 0
en
edges[[1]]
edges[[1]][1]
energy <- function(edges, state) {
size <- length(edges)
en <- 0
for (i in 1:size) {
en <- en + state[edges[[1]][1]]*state[edges[[i]][2]]
}
return(-en)
}
energy(lattice.gen(3,3)$edges, state)
energy(lattice.gen(3,3)$edges, state)
energy(lattice.gen(3,3)$edges, state)
energy(lattice.gen(3,3)$edges, state)
energy(lattice.gen(3,3)$edges, state)
energy(lattice.gen(3,3)$edges, state)
energy(lattice.gen(3,3)$edges, state)
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
energy(lattice.gen(3,3)$edges, ising())
library(LM)
library(LM)
ising()
lattice.gen(3,3)
complete.graph.gen(5)
is.numeric(1.0)
is.numeric(1.3)
is.numeric(0)
is.list()
library(LM)
ising()
ising()
ising()
ising()
ising()
ising(-1)
ising(1, 0)
ising(1, lattice.gen(3,-1))
ising(1, lattice.gen(3,3), -1)
ising(1, lattice.gen(3,3), 1, 0)
ising(1, lattice.gen(3,3), 1, TRUE)
ising(1, lattice.gen(3,3), 1, TRUE)
ising(1, lattice.gen(3,3), 1, TRUE)
complete.graph.gen(3)
complete.graph.gen(-1)
tree.gen(3)
tree.gen(3,2)
tree.gen(-1,2)
tree.gen(2,2)
tree.gen(2,3)
tree.gen(2,1)
tree.gen(3,1)
tree.gen(3,2)
tree.gen(3,2)
tree.gen(3,1)
# Funkcja służy do generowania drzew
# Przyjmuje dwa argumenty: n - liczba wierzchołków oraz branching_factor - maksymalna
# liczba sąsiadów pewnego wierzchołka
# Zwraca listę zawieracjącą listę par wierzchołków (czyli krawędzie) oraz macierz sąsiedztwa
tree.gen <- function(n = 5, branching_factor = 2) {
if (!is.numeric(n) || n <= 0) {
stop("Argument 'n' musi być liczbą całkowitą dodatnią")
}
if (!is.numeric(branching_factor) || branching_factor <= 1 || branching_factor >= n) {
stop("Argument 'branching_factor' musi być liczbą całkowitą większą niż 1 i mniejszą niż n")
}
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
add_edges <- function(v, w, branching_factor) {
children <- 0
nx <- sample.int(branching_factor - 1, size = 1)
for (i in 1:nx) {
if (w <= n) {
edges[[length(edges) + 1]] <<- c(v, w)
w <- w + 1
children <- children + 1
} else {
break
}
}
return(w)
}
w <- 2
for (v in 1:(n - 1)) {
w <- add_edges(v, w, branching_factor)
if (w > n) {
break
}
}
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
tree.gen(3,1)
tree.gen(3,2)
tree.gen(3,3)
tree.gen(3,2)
library(LM)
library(LM)
library(LM)
# Obliczenia związane z szybkością symulacji dla różnych wielkości grafów
library("microbenchmark")
result_complete <- list()
for (n in 2:7) {
result_complete[[length(result_complete)+1]] <- microbenchmark(ising(0.4, complete.graph.gen(n)), times = 10, unit = "s")
}
result_complete
load("~/GitHub/LM/R/Wyniki czasowe/complete_graph.RData")
load("~/GitHub/LM/R/Wyniki czasowe/complete_graph.RData")
View(result_complete)
# Obliczenia związane z szybkością symulacji dla różnych wielkości grafów
library("microbenchmark")
result_complete <- list()
for (n in 2:7) {
result_complete[[length(result_complete)+1]] <- microbenchmark(ising(0.4, complete.graph.gen(n)), times = 10, unit = "s")
}
result_tree <- list()
for (n in 2:20) {
result_tree[[length(result_tree)+1]] <- microbenchmark(ising(0.4, tree.gen(n)), times = 10, unit = "s")
}
result_complete <- list()
for (n in 2:7) {
result_complete[[length(result_complete)+1]] <- microbenchmark(ising(0.4, complete.graph.gen(n)), times = 10, unit = "s")
}
result_tree <- list()
for (n in 3:20) {
result_tree[[length(result_tree)+1]] <- microbenchmark(ising(0.4, tree.gen(n)), times = 10, unit = "s")
}
result_lattice <- list()
for (i in 2:5) {
for (j in 2:5){
result_lattice[[length(result_lattice)+1]] <- microbenchmark(ising(0.4, lattice.gen(i, j)), times = 10, unit = "s")
}
}
result_lattice <- list()
for (i in 2:5) {
for (j in i:5){
result_lattice[[length(result_lattice)+1]] <- microbenchmark(ising(0.4, lattice.gen(i, j)), times = 10, unit = "s")
}
}
View(result_complete)
result_complete
View(result_lattice)
result_lattice
result_tree
save(result_complete, file = "~/GitHub/LM/R/Wyniki czasowe/complete_graph.RData")
save(result_tree, file = "~/GitHub/LM/R/Wyniki czasowe/tree_graph.RData")
save(result_lattice, file = "~/GitHub/LM/R/Wyniki czasowe/lattice_graph.RData")
# Obliczenia związane z szybkością symulacji dla różnych typów grafów ze względu na temperaturę
temp <- c(0, 0.01, 0.1, 0.4, 0.8, 1)
result_complete_temp <- list()
for (t in temp) {
result_complete_temp[[length(result_complete_temp)+1]] <- microbenchmark(ising(t, complete.graph.gen(5)), times = 10, unit = "s")
}
result_tree_temp <- list()
for (t in temp) {
result_tree_temp[[length(result_tree_temp)+1]] <- microbenchmark(ising(t, tree.gen(8)), times = 10, unit = "s")
}
result_lattice_temp <- list()
for (t in temp) {
result_lattice_temp[[length(result_lattice_temp)+1]] <- microbenchmark(ising(t, lattice.gen(3, 3)), times = 10, unit = "s")
}
save(result_complete_temp, file = "~/GitHub/LM/R/Wyniki czasowe/complete_graph_temp.RData")
save(result_tree_temp, file = "~/GitHub/LM/R/Wyniki czasowe/tree_graph_temp.RData")
save(result_lattice_temp, file = "~/GitHub/LM/R/Wyniki czasowe/lattice_graph_temp.RData")
result_complete_temp
result_tree_temp
result_lattice_temp
