y <- 1:3
x <- 1:3
<- 1:3
x <- 1:3
y <- 1:3
data <- expand.grid(X=x, Y=y)
data$Z <- res[[10]]
data$Z <- res[[9]]
data$Z <- res[[1]]
x <- 1:3
y <- 1:3
data <- expand.grid(X=x, Y=y)
res <- list()
for (i in 1:10){
res[[length(res)+1]] <- ising(temp = 0, graph = lattice.gen(3,3))
}
data$Z <- res[[1]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[2]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[3]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[4]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
data$Z <- res[[5]]
data <- data.frame(data)
ggplot(data, aes(X, Y, fill= Z)) +
geom_tile()
complete.graph.gen <- function(n = 5) {
edges <- list()
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
edges[[length(edges) + 1]] <- c(i, j)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
ising(0.4, complete.graph.gen(10))
ising(0.4, complete.graph.gen(5))
ising(0.4, complete.graph.gen(5))
ising(0.4, complete.graph.gen(5))
ising(0.4, complete.graph.gen(5))
ising(0.4, complete.graph.gen(6))
ising(0.4, complete.graph.gen(7))
ising(0.4, complete.graph.gen(8))
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 50, s_up = rep(1, n)) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s)-1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k-1)){memory[[length(memory)+1]]<- list()}
for (i in (2^k):1) {
print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
# memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
}
ising(temp = 0.01, graph = lattice.gen(3,3))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising(temp = 0.01, graph = lattice.gen(3,3),s_up = c(1, -1,  1, -1, -1, -1,  1, -1, -1))
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 50, s_up = rep(1, n)) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s)-1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k-1)){memory[[length(memory)+1]]<- list()}
for (i in (2^k):1) {
print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
# memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
}
ising
ising()
ising()
ising()
ising()
ising()
install.packages("plot.matrix")
library(plot.matrix)
M <- lattice.gen(5,5)
lattice.gen <- function(n_row = 3, n_col = 3) {
n <- n_row * n_col
nr_ver <- 1:n
edges <- list()
for (j in 1:n_col) {
for (i in 1:(n_row - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + i * n_col)
}
}
for (i in 1:n_row) {
for (j in 1:(n_col - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + (i - 1) * n_col + 1)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
M <- lattice.gen(5,5)
M
M$nei_matrix
M.lattice.gen <- function(n_row = 5, n_col = 5, down_spins = 0) {
d <- n_col * n_row
if (down_spins > d) # idk czy dopisywac jakies warunki typu 'argumenty musza byc naturalne' czy cos
{
stop("number of down-spins must be smaller than product of dimensions")
}
v <- rep(1, d)
d_cords <- sample(1:d, down_spins, replace = FALSE)
v[d_cords] <- -1
return(matrix(v, n_row, n_col))
}
M <- M.lattice.gen(5,5,11)
M
X <- matrix(M<0, ncol = 5)
X
plot(X)
plot(X, col = c("white", "blue"))
M <- M.lattice.gen(100,500,34092)
X <- matrix(M<0, ncol = 5)
plot(X, col = c("white", "blue"))
M <- M.lattice.gen(10,50,350)
X <- matrix(M<0, ncol = 5)
plot(X, col = c("white", "blue"))
M <- M.lattice.gen(10,50,350)
X <- matrix(M<0, nrow = 10)
plot(X, col = c("white", "blue"))
plot.matrix(X, col = c("white", "blue"))
install.packages("plot.matrix")
install.packages("plot.matrix")
library(plot.matrix)
plot.matrix(X, col = c("white", "blue"))
plot.matrix(X, col = c("white", "blue"), axis.col = NULL, axis.row = NULL)
plot(X, col = c("white", "blue"), axis.col = NULL, axis.row = NULL)
M <- M.lattice.gen(10,50,350)
X <- matrix(M<0, nrow = 10)
plot(X, col = c("white", "blue"), axis.col = NULL, axis.row = NULL)
X
plot(X, col = c("white", "blue"), axis.col = NULL, axis.row = NULL, key = NULL)
plot(X, col = c("white", "blue"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA)
plot(X, col = c("grey", "blue"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA)
M <- M.lattice.gen(10,10,75)
X <- matrix(M<0, nrow = 10)
plot(X, col = c("grey", "blue"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA)
plot(X, col = c("grey", "blue"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA, xlab = NA, ylab = NA)
plot(X, col = c("grey", "blue"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA, xlab = NA, ylab = NA, title = NA)
plot(X, col = c("grey", "blue"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA, xlab = NA, ylab = NA, main = NA)
M <- M.lattice.gen(500,100,35042)
X <- matrix(M<0, nrow = 500)
plot(X, col = c("grey", "blue"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA, xlab = NA, ylab = NA, main = NA)
plot(X, col = c("pink", "blue"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA, xlab = NA, ylab = NA, main = NA)
plot(X, col = c("pink", "lightblue"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA, xlab = NA, ylab = NA, main = NA)
M <- M.lattice.gen(10,10,60)
X <- matrix(M<0, nrow = 10)
plot(X, col = c("grey", "blue"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA, xlab = NA, ylab = NA, main = NA)
plot(X, col = c("green", "violet"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA, xlab = NA, ylab = NA, main = NA)
plot(X, col = c("darkblue", "lightpink"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA, xlab = NA, ylab = NA, main = NA)
plot(X, col = c("darkslateblue", "mediumorchid"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA, xlab = NA, ylab = NA, main = NA)
plot(X, col = c("mediumpurple3", "cyan3"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA, xlab = NA, ylab = NA, main = NA)
plot(X, col = c("mediumpurple3", "lightblue"), axis.col = NULL, axis.row = NULL, key = NULL,
border = NA, xlab = NA, ylab = NA, main = NA)
lattice.gen <- function(n_row = 3, n_col = 3) {
n <- n_row * n_col
nr_ver <- 1:n
edges <- list()
for (j in 1:n_col) {
for (i in 1:(n_row - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + i * n_col)
}
}
for (i in 1:n_row) {
for (j in 1:(n_col - 1)) {
edges[[length(edges) + 1]] <- c(j + (i - 1) * n_col, j + (i - 1) * n_col + 1)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
lattice.gen(3,3)
neighbours <- function(nei, state) {
tmp <- state[as.logical(nei)]
nb_plus <- sum(tmp == 1)
nb_minus <- length(tmp) - nb_plus
list(nb_minus = nb_minus, nb_plus = nb_plus)
}
ising(temp = 0.01, graph = lattice.gen(3,3))
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 50, s_up = rep(1, n)) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s)-1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k-1)){memory[[length(memory)+1]]<- list()}
for (i in (2^k):1) {
print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
}
}
ising(temp = 0.01, graph = lattice.gen(3,3))
complete.graph.gen <- function(n = 5) {
edges <- list()
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
edges[[length(edges) + 1]] <- c(i, j)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
install.packages("igraph")
library(igraph)
edges <- c(1, 2, 2, 3, 3, 4, 4, 1, 2, 4)
g <- graph(edges, directed=FALSE)
plot(g, main="Simple Graph")
plot(g, main="Simple Graph")
library(igraph)
edges <- c(1, 2, 2, 3, 3, 4, 4, 1, 2, 4)
g <- graph(edges, directed=FALSE)
plot(g, main="Simple Graph")
# Define vertices and edges
vertices <- c(1, 2, 3, 4)
edges <- c(1, 2, 2, 3, 3, 4, 4, 1, 2, 4)
# Create graph object
g <- graph(edges, directed=FALSE)
# Set vertex attributes
V(g)$name <- c("A", "B", "C", "D")
V(g)$color <- c("red", "green", "blue", "yellow")
V(g)$size <- c(15, 30, 45, 60)
# Set edge attributes
E(g)$color <- "gray"
E(g)$width <- 2
# Plot the graph
plot(g, vertex.label=V(g)$name, vertex.color=V(g)$color, vertex.size=V(g)$size,
edge.color=E(g)$color, edge.width=E(g)$width, main="Graph with Attributes")
complete.graph.gen(5)
complete.graph.gen(5)$edges
unlist(complete.graph.gen(5)$edges)
vertices <- 1:5
edges <- unlist(complete.graph.gen(5)$edges)
g <- graph(edges, directed=FALSE)
plot(g)
plot(g, vertex.color = ising(0.01, complete.graph.gen(5)))
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 4)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 10)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 1000)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 100)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 10)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.4, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5), step = 2))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5), step = 2))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5), step = 2))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5), step = 2))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5), step = 2))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5), step = 2))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(5), step = 2))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = 2))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = 1))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = 1))+1, vertex.size = 50)
ising(0.01, complete.graph.gen(8), step = 1))
ising(0.01, complete.graph.gen(8), step = 1)
ising(0.01, complete.graph.gen(8), step = 1)
ising(0.01, complete.graph.gen(8), step = 1)
ising(0.01, complete.graph.gen(8), step = 1)
ising(0.01, complete.graph.gen(8), step = 1)
ising(0.01, complete.graph.gen(8), step = 1)
ising(0.01, complete.graph.gen(8), step = 1)
ising(0.01, complete.graph.gen(8), step = 1)
ising(0.01, complete.graph.gen(8), step = 1)
ising(0.01, complete.graph.gen(8), step = 1)
ising(0.01, complete.graph.gen(8), step = 1)
ising(0.01, complete.graph.gen(8), step = 1)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = 1))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = 1))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = 1))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = 1))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = 1))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = log2(3)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = log2(3)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = log2(3)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = log2(3)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = log2(3)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = log2(6)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = log2(6)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = log2(6)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = log2(6)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = log2(10)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = log2(10)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(8), step = log2(10)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(10)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(10)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(10)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
vertices <- 1:10
edges <- unlist(complete.graph.gen(10)$edges)
g <- graph(edges, directed=FALSE)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
plot(g, vertex.color = (ising(0.01, complete.graph.gen(10), step = log2(20)))+1, vertex.size = 50)
