styler::style_pkg()
library(igraph)
make_tree(5)
make_tree(5, directed = FALSE)
make_tree(5, mode = "undirected")
tree <- make_tree(5, mode = "undirected")
tree
sample.int(5, size = 1)
n = 5
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
v <- sample.int(n, size = 1)
if (v == i) {v <- sample.int(n, size = 1)}
edges[[length(edges) + 1]] <- c(i, v)
}
edges
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
nei_matrix
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
v <- sample.int(n, size = 1)
if (v == i || sum(nei_matrix[v,])>2) {v <- sample.int(n, size = 1)}
edges[[length(edges) + 1]] <- c(i, v)
nei_matrix[i, v] <- 1
nei_matrix[v, i] <- 1
}
edges
rep(0,5)
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
i <- 1
while(all(sumRows(nei_matrix)==rep(0,n))) {
v <- sample.int(n, size = 1)
if (v == i) {v <- sample.int(n, size = 1)}
edges[[length(edges) + 1]] <- c(i, v)
nei_matrix[v, i] <- 1
nei_matrix[i, v] <- 1
i <- i + 1
}
sumRows
nei_matrix
sumRows(nei_matrix)
sum(nei_matrix)
sum(nei_matrix, 1)
sum(nei_matrix, margin = 1)
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
i <- 1
any(rowSums(nei_matrix)==rep(0,n))
rowSums(nei_matrix)==rep(0,n)
while(any(rowSums(nei_matrix)==rep(0,n))) {
v <- sample.int(n, size = 1)
if (v == i) {v <- sample.int(n, size = 1)}
edges[[length(edges) + 1]] <- c(i, v)
nei_matrix[v, i] <- 1
nei_matrix[i, v] <- 1
i <- i + 1
}
nei_matrix
edges
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
i <- 1
while(any(rowSums(nei_matrix)==rep(0,n))) {
v <- sample.int(n, size = 1)
if (v < i) {v <- sample.int(n, size = 1)}
edges[[length(edges) + 1]] <- c(i, v)
nei_matrix[v, i] <- 1
nei_matrix[i, v] <- 1
i <- i + 1
}
edges
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
i <- 1
while(any(rowSums(nei_matrix)==rep(0,n))) {
v <- sample.int(n, size = 1)
while (v < i) {v <- sample.int(n, size = 1)}
edges[[length(edges) + 1]] <- c(i, v)
nei_matrix[v, i] <- 1
nei_matrix[i, v] <- 1
i <- i + 1
}
edges
nei_matrix
generate_tree_graph <- function(num_nodes, branching_factor) {
if (num_nodes < 1) {
stop("Number of nodes must be at least 1")
}
if (branching_factor < 1) {
stop("Branching factor must be at least 1")
}
# Initialize an empty list of edges
edges <- list()
# Function to add edges for a node
add_edges <- function(node, next_node, branching_factor) {
children <- 0
for (i in 1:branching_factor) {
if (next_node <= num_nodes) {
edges[[length(edges) + 1]] <<- c(node, next_node)
next_node <- next_node + 1
children <- children + 1
} else {
break
}
}
return(next_node)
}
# Start with the root node and create edges
next_node <- 2
for (node in 1:(num_nodes - 1)) {
next_node <- add_edges(node, next_node, branching_factor)
if (next_node > num_nodes) {
break
}
}
# Create an adjacency matrix
adj_matrix <- matrix(0, nrow = num_nodes, ncol = num_nodes)
for (edge in edges) {
adj_matrix[edge[1], edge[2]] <- 1
adj_matrix[edge[2], edge[1]] <- 1
}
# Return the adjacency matrix and list of edges
list(adj_matrix = adj_matrix, edges = edges)
}
generate_tree_graph(5, 2)
generate_tree_graph(5, 2)
generate_tree_graph(5, 2)
generate_tree_graph(5, 2)
generate_tree_graph(5, 2)
generate_tree_graph(5, 3)
tree.gen <- function(n = 5, branching_factor = 2) {
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
add_edges <- function(v, w, branching_factor) {
children <- 0
for (i in 1:branching_factor) {
if (w <= n) {
edges[[length(edges) + 1]] <<- c(v, w)
w <- w + 1
children <- children + 1
} else {
break
}
}
return(w)
}
w <- 2
for (v in 1:(n - 1)) {
w <- add_edges(v, w, branching_factor)
if (w > n) {
break
}
}
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
tree.gen()
ising(0.01, tree.gen(7, 3))
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 50, s_up = rep(1, n)) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s) - 1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k - 1)) {
memory[[length(memory) + 1]] <- list()
}
for (i in (2^k):1) {
print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
}
}
neighbours <- function(nei, state) {
tmp <- state[as.logical(nei)]
nb_plus <- sum(tmp == 1)
nb_minus <- length(tmp) - nb_plus
list(nb_minus = nb_minus, nb_plus = nb_plus)
}
ising(0.01, tree.gen(7, 3))
ising(0.01, tree.gen(7, 3))
vertices <- 1:10
edges <- unlist(tree.gen(10)$edges)
g <- graph(edges, directed = FALSE)
plot(g)
plot(g, vertex.size = 50)
plot(g, vertex.size = 25)
plot(g, vertex.size = 25, vertec.color = ising(0.01, tree.gen(10))+1)
plot(g, vertex.size = 25, vertec.color = ising(0.01, tree.gen(10))+1)
plot(g, vertex.size = 25, vertec.color = ising(0.01, tree.gen(10))+1)
plot(g, vertex.size = 25, vertec.color = ising(0.01, tree.gen(10))+1)
ising(0.01, tree.gen(10))
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1)
# print(i)
stans_new <- list()
ising <- function(temp = 0.01, graph = lattice.gen(3, 3), step = 50, s_up = rep(1, n)) {
new_state <- function(state, U_vec_step) {
n <- ncol(graph$nei_matrix)
stan <- state
v <- sample.int(n, 1)
nei_plus <- neighbours(graph$nei_matrix[v, ], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v, ], stan)$nb_minus
prog <- exp(2 * temp * (nei_plus - nei_minus)) / (exp(2 * temp * (nei_plus - nei_minus)) + 1)
if (U_vec_step < prog) {
stan[v] <- 1
} else {
stan[v] <- -1
}
return(stan)
}
state_hash <- function(s) {
sum(2^(0:(length(s) - 1)) * ifelse(s > 0, 1, 0))
}
n <- ncol(graph$nei_matrix)
s_down <- rep(-1, n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while (k < step) {
U_vec <- append(U_vec, runif(2^(k - 1)))
for (i in 1:2^(k - 1)) {
memory[[length(memory) + 1]] <- list()
}
for (i in (2^k):1) {
# print(i)
stans_new <- list()
for (s in stans) {
# print(s)
memorized <- state_hash(s)
if (is.null(memory[[i]][[as.character(memorized)]])) {
stan <- new_state(s, U_vec[i])
memory[[i]][[as.character(memorized)]] <- stan
stans_new[[length(stans_new) + 1]] <- stan
} else {
stans_new[[length(stans_new) + 1]] <- memory[[i]][[as.character(memorized)]]
}
}
stans <- stans_new
}
k <- k + 1
if (all(stans[[1]] == stans[[2]])) {
return(stans[[1]])
}
}
}
tree.gen <- function(n = 5, branching_factor = 2) {
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
add_edges <- function(v, w, branching_factor) {
children <- 0
for (i in 1:branching_factor) {
if (w <= n) {
edges[[length(edges) + 1]] <<- c(v, w)
w <- w + 1
children <- children + 1
} else {
break
}
}
return(w)
}
w <- 2
for (v in 1:(n - 1)) {
w <- add_edges(v, w, branching_factor)
if (w > n) {
break
}
}
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.04, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.04, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.04, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.04, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.04, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.04, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1, vertex.label = NULL)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1, vertex.label = NULL)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1, vertex.label = NULL)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1, vertex.label = rep(NULL, 10))
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1, vertex.label = rep(NULL, 10))
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1, vertex.label = NA)
tes
tes
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.01, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(2, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(2, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(2, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(2, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(2, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+1, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(1, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0.4, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10, branching_factor = 3))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10, branching_factor = 3))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10, branching_factor = 3))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10, branching_factor = 3))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10, branching_factor = 4))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10, branching_factor = 4))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10, branching_factor = 4))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10, branching_factor = 4))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10, branching_factor = 6))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10, branching_factor = 6))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(10, branching_factor = 6))+2, vertex.label = NA)
plot(g, vertex.size = 25, vertex.color = ising(0, tree.gen(20, branching_factor = 6))+2, vertex.label = NA)
vertices <- 1:10
edges <- unlist(tree.gen(10, branching_factor = 6))
g <- graph(edges, directed = FALSE)
edges
edges <- unlist(tree.gen(10, branching_factor = 6)$edges)
g <- graph(edges, directed = FALSE)
plot(g)
edges <- unlist(tree.gen(10, branching_factor = 4)$edges)
g <- graph(edges, directed = FALSE)
plot(g)
tree.gen
tree.gen <- function(n = 5, branching_factor = 2) {
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
add_edges <- function(v, w, branching_factor) {
children <- 0
nx <- sample.int(branching_factor, size = 1)
for (i in 1:nx) {
if (w <= n) {
edges[[length(edges) + 1]] <<- c(v, w)
w <- w + 1
children <- children + 1
} else {
break
}
}
return(w)
}
w <- 2
for (v in 1:(n - 1)) {
w <- add_edges(v, w, branching_factor)
if (w > n) {
break
}
}
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
edges <- unlist(tree.gen(10, branching_factor = 4)$edges)
g <- graph(edges, directed = FALSE)
plot(g)
edges <- unlist(tree.gen(10, branching_factor = 4)$edges)
g <- graph(edges, directed = FALSE)
plot(g)
tree.gen <- function(n = 5, branching_factor = 2) {
edges <- list()
nei_matrix <- matrix(0, nrow = n, ncol = n)
add_edges <- function(v, w, branching_factor) {
children <- 0
nx <- sample.int(branching_factor - 1, size = 1)
for (i in 1:nx) {
if (w <= n) {
edges[[length(edges) + 1]] <<- c(v, w)
w <- w + 1
children <- children + 1
} else {
break
}
}
return(w)
}
w <- 2
for (v in 1:(n - 1)) {
w <- add_edges(v, w, branching_factor)
if (w > n) {
break
}
}
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
edges <- unlist(tree.gen(10, branching_factor = 4)$edges)
g <- graph(edges, directed = FALSE)
plot(g)
styler::style_pkg()
