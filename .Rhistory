styler::style_pkg()
energy <- function(grid, J = 1) {
size <- nrow(grid)
en <- 0
for (i in 1:size) {
for (j in 1:size) {
spin <- grid[i, j]
neighbors <- grid[(i %% size) + 1, j] + grid[(i - 2) %% size + 1, j] +
grid[i, (j %% size) + 1] + grid[i, (j - 2) %% size + 1]
en <- en - J * spin * neighbors
}
}
return(en / 2)
}
lattice.gen <- function(n_row = 5, n_col = 5, down_spins = 0) {
d <- n_col * n_row
if (down_spins > d) # idk czy dopisywac jakies warunki typu 'argumenty musza byc naturalne' czy cos
{
stop("number of down-spins must be smaller than product of dimensions")
}
v <- rep(1, d)
d_cords <- sample(1:d, down_spins, replace = FALSE)
v[d_cords] <- -1
return(matrix(v, n_row, n_col))
}
krata <- lattice.gen(7, 10, 32)
krata
n_row = 5
n_col = 5
n <- n_row*n_col
n
nr_ver <- 1:n
nr_ver
pais(nr_ver)
pairs(nr_ver)
expand.grid(nr_ver)
expand.grid(Nr_ver, nr_ver)
expand.grid(nr_ver, nr_ver)
print(c(i,i+1))
for (i in 1:nrow){
print(c(i,i+1))
}
for (i in 1:n_row){
print(c(i,i+1))
}
for (i in 1:n_row-){
for (i in 1:n_row-1){
print(c(i,i+1))
}
for (i in 1:(n_row-1)){
print(c(i,i+1))
}
for (i in 1:(n_row-1)){
print(c(i,i+1))
}
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(i,i+1))
}
}
print(c(i+j*n_col,i+1))
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(i+j*n_col,i+1))
}
}
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(j*n_col,i+1))
}
}
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(i*n_col,i+1))
}
}
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(i+(i-1)*n_col,i+1))
}
}
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(i+(j-1)*n_col,i+1))
}
}
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(i+(j-1)*n_col,i+(j-1)*n_col+1))
}
}
n_col = 2
n_row = 3
n <- n_row*n_col
nr_ver <- 1:n
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(i+(j-1)*n_col,i+(j-1)*n_col+1))
}
}
n
nr_ver
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(i+(j-1)*n_col,i+(j-1)*n_col+1))
}
}
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(i+(j-1)*n_row,i+(j-1)*n_row+1))
}
}
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(i+(j-1)*n_row,i+(j-1)*n_row+1))
print(i,i+n_row)
}
}
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(i+(j-1)*n_row,i+(j-1)*n_row+1))
print(c(i,i+n_row))
}
}
for (j in 1:n_col){
for (i in 1:(n_row-1)){
print(c(i+(j-1)*n_row,i+(j-1)*n_row+1))
}
}
print(c(i,i+n_row))
for(i in 1:n_row){
print(c(i,i+n_row))
}
edges <- list()
edges <- list()
edges[[1]] <- c(1,2)
edges
edges[[length(edges) + 1]] <- c(1,3)
edges
1:n_row
n_col = 3
n_row = 2
for (j in 1:n_col){
for (i in 1:(n_row-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+i*n_col)
}
}
edges
edges <- list()
for (j in 1:n_col){
for (i in 1:(n_row-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+i*n_col)
}
}
edges
n_col
edges <- list()
for (j in 1:n_col){
for (i in 1:(n_row-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+i*n_col)
}
}
for (i in 1:n_row){
for (j in 1:(n_col-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+(i-1)*n_col+1)
}
}
edges
n_row = 3
n_col = 3
n <- n_row*n_col
nr_ver <- 1:n
edges <- list()
for (j in 1:n_col){
for (i in 1:(n_row-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+i*n_col)
}
}
for (i in 1:n_row){
for (j in 1:(n_col-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+(i-1)*n_col+1)
}
}
edges
#krata <- lattice.gen(7, 10, 32)
krata <- lattice.gen(7, 10)
krata
lattice.gen <- function(n_row = 3, n_col = 3) {
n <- n_row*n_col
nr_ver <- 1:n
edges <- list()
for (j in 1:n_col){
for (i in 1:(n_row-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+i*n_col)
}
}
for (i in 1:n_row){
for (j in 1:(n_col-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+(i-1)*n_col+1)
}
}
}
#krata <- lattice.gen(7, 10, 32)
krata <- lattice.gen(7, 10)
lattice.gen <- function(n_row = 3, n_col = 3) {
n <- n_row*n_col
nr_ver <- 1:n
edges <- list()
for (j in 1:n_col){
for (i in 1:(n_row-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+i*n_col)
}
}
for (i in 1:n_row){
for (j in 1:(n_col-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+(i-1)*n_col+1)
}
}
return(edges)
}
#krata <- lattice.gen(7, 10, 32)
krata <- lattice.gen(7, 10)
krata
nei_matrix <- matrix(0, n_row = n, n_col = n)
nei_matrix <- matrix(0, nrow = n, ncol = n)
nei_matrix
length(edges)
edges <- list()
for (j in 1:n_col){
for (i in 1:(n_row-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+i*n_col)
}
}
for (i in 1:n_row){
for (j in 1:(n_col-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+(i-1)*n_col+1)
}
}
edges
edges[[1]]
matrix[edges[[1]]]
matrix[edges[[1]][1],edges[[1]][1]]
matrix[edges[[1]][1],edges[[1]][2]]
matrix[edges[[1]][1],edges[[1]][2]]
edges[[1]][2]
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)){
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x,y] <- 1
nei_matrix[y,x] <- 1
}
nei_matrix
return(list(edges,nei_matrix))
lattice.gen <- function(n_row = 3, n_col = 3) {
n <- n_row*n_col
nr_ver <- 1:n
edges <- list()
for (j in 1:n_col){
for (i in 1:(n_row-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+i*n_col)
}
}
for (i in 1:n_row){
for (j in 1:(n_col-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+(i-1)*n_col+1)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)){
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x,y] <- 1
nei_matrix[y,x] <- 1
}
return(list(edges,nei_matrix))
}
#krata <- lattice.gen(7, 10, 32)
krata <- lattice.gen(7, 10)
krata
krata$edges
return(list(edges = edges,nei_matrix = nei_matrix))
lattice.gen <- function(n_row = 3, n_col = 3) {
n <- n_row*n_col
nr_ver <- 1:n
edges <- list()
for (j in 1:n_col){
for (i in 1:(n_row-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+i*n_col)
}
}
for (i in 1:n_row){
for (j in 1:(n_col-1)){
edges[[length(edges) + 1]] <- c(j+(i-1)*n_col, j+(i-1)*n_col+1)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)){
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x,y] <- 1
nei_matrix[y,x] <- 1
}
return(list(edges = edges,nei_matrix = nei_matrix))
}
#krata <- lattice.gen(7, 10, 32)
krata <- lattice.gen(7, 10)
krata$edges
krata$nei_matrix
expand.grid(5,5)
expand.grid(1:5,1:5)
complete.graph.gen <- function(n=5) {
edges <- list()
for (i in 1:n){
for (j in 1:n){
edges[[length(edges)+1]] <- c(i, j)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)){
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x,y] <- 1
nei_matrix[y,x] <- 1
}
return(list(edges = edges,nei_matrix = nei_matrix))
}
graf <- complete.graph.gen(5)
graf$edges
graf$nei_matrix
