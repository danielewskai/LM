stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
U_vec
(2^k):1
prog
temp = 0.1
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
temp = 0.01
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
while(k < 2) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 2) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
temp = 0.0001
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 2) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
prog
U_vec[i]
while(k < 10) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
for (s in stans){
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
memory
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
print(i)
for (s in stans){
print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
print(v)
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
print(i)
for (s in stans){
print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
for (v in 1:n){
print(v)
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec[i]<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
prog
nei_plus
nei_minus
complete.graph.gen <- function(n = 5) {
edges <- list()
for (i in 1:(n-1)) {
for (j in (i+1):n) {
edges[[length(edges) + 1]] <- c(i, j)
}
}
nei_matrix <- matrix(0, nrow = n, ncol = n)
for (i in 1:length(edges)) {
x <- edges[[i]][1]
y <- edges[[i]][2]
nei_matrix[x, y] <- 1
nei_matrix[y, x] <- 1
}
return(list(edges = edges, nei_matrix = nei_matrix))
}
temp = 0.0001
graph = complete.graph.gen(5)
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
stans
new_state <- function(state, graph, U_vec_step){
for (v in 1:n){
print(v)
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec_step<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
print(i)
for (s in stans){
print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
}
}
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
}
new_state <- function(state,  U_vec_step, graph = graph){
for (v in 1:n){
print(v)
stan <- s
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec_step<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
stan <- new_state(s, U_vex[i])
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
stans_new <- stans_new[[length(stans_new)+1]]<-stan
}
}
stas <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
neighbours <- function(nei, state) {
ct <- table(state[nei])
if (is.na(ct['-1'])){
ct['-1'] <- 0
}
if (is.na(ct['1'])){
ct['1'] <- 0
}
list(nb_minus = ct['-1'], nb_plus = ct['1'])
}
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
stan <- new_state(s, U_vex[i])
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
stans_new <- stans_new[[length(stans_new)+1]]<-stan
}
}
stas <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
stan <- new_state(s, U_vex[i])
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
stans_new <- stans_new[[length(stans_new)+1]]<-stan
}
}
stans <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
stan <- new_state(s, U_vex[i])
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
stans_new[[length(stans_new)+1]]<-stan
}
}
stans <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
nei <- graph$nei_matrix
state <- 3
ct <- table(state[nei])
ct
state
state<- 1
ct <- table(state[nei])
ct
if (is.na(ct['-1'])){
ct['-1'] <- 0
}
if (is.na(ct['1'])){
ct['1'] <- 0
}
list(nb_minus = ct['-1'], nb_plus = ct['1'])
new_state <- function(state,  U_vec_step, graph = graph){
for (v in 1:n){
stan <- state
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec_step<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
return(stan)
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
stan <- new_state(s, U_vex[i])
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
stans_new[[length(stans_new)+1]]<-stan
}
}
stans <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
new_state <- function(state,  U_vec_step, graph = graph){
n <- ncol(graph$nei_matrix)
for (v in 1:n){
stan <- state
nei_plus <- neighbours(graph$nei_matrix[v,], stan)$nb_plus
nei_minus <- neighbours(graph$nei_matrix[v,], stan)$nb_minus
prog <- exp(2*temp*(nei_plus-nei_minus))/(exp(2*temp*(nei_plus-nei_minus))+1)
if (U_vec_step<prog) {
stan[v] <- 1
} else{
stan[v] <- -1
}
}
return(stan)
}
n <- ncol(graph$nei_matrix)
s_up <- rep(1,n)
s_down <- rep(-1,n)
stans <- list(s_up, s_down)
U_vec <- c(runif(1))
k <- 0
memory <- list()
while(k < 3) {
U_vec <- append(U_vec, runif(2^(k-1))) # poprawić
for (i in (2^k):1){
#print(i)
stans_new <- list()
for (s in stans){
#print(s)
if (is.null(memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]])){
stan <- new_state(s, U_vex[i])
memory[[paste(as.character(-i),paste(as.character(s), collapse = ','), collapse = ";")]] <- stan
stans_new[[length(stans_new)+1]]<-stan
}
}
stans <- stans_new
}
k <- k+1
#memory[[paste(as.character(-1),paste(as.character(s_up), collapse = ','), collapse = ";")]]
}
